from typing import Optional
from pydantic import BaseModel, Field

class AgentSecrets(BaseModel):
    """Pydantic model for storing API keys and secrets for an agent's tools."""
    discord_bot_token: Optional[str] = None
    telegram_api_id: Optional[str] = None
    telegram_api_hash: Optional[str] = None
    telegram_bot_token: Optional[str] = None
    serpapi_api_key: Optional[str] = None
    newsapi_org_api_key: Optional[str] = None
    finnhub_api_key: Optional[str] = None
    quandl_api_key: Optional[str] = None
    cohere_api_key: Optional[str] = None
    groq_api_key: Optional[str] = None # Allow per-agent Groq key
    libp2p_private_key: Optional[str] = None

class AgentConfig(BaseModel):
    """Pydantic model for an agent's overall configuration."""
    id: Optional[str] = None # Will be generated by UUID if not provided
    name: str
    bio: Optional[str] = None
    knowledge: Optional[str] = None
    persona: Optional[str] = None
    secrets: AgentSecrets = Field(default_factory=AgentSecrets) # Nested secrets model
