from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field

class AgentSecrets(BaseModel):
    """Pydantic model for storing API keys and secrets for an agent's tools."""
    discord_bot_token: Optional[str] = None
    telegram_api_id: Optional[str] = None
    telegram_api_hash: Optional[str] = None
    telegram_bot_token: Optional[str] = None
    serpapi_api_key: Optional[str] = None
    newsapi_org_api_key: Optional[str] = None
    finnhub_api_key: Optional[str] = None
    quandl_api_key: Optional[str] = None
    cohere_api_key: Optional[str] = None
    groq_api_key: Optional[str] = None # Allow per-agent Groq key
    libp2p_private_key: Optional[str] = None

class AgentConfig(BaseModel):
    """Pydantic model for an agent's overall configuration."""
    id: Optional[str] = None # Will be generated by UUID if not provided
    name: str
    bio: Optional[str] = None
    knowledge: Optional[str] = None
    persona: Optional[str] = None
    secrets: AgentSecrets = Field(default_factory=AgentSecrets) # Nested secrets model


class AgentCard(BaseModel):
    """
    Represents a discoverable agent in the decentralized marketplace.
    Matches the common/models.py AgentCard.
    """
    peer_id: str
    name: str
    bio: str
    capabilities: List[str]
    internal_url: str # Internal URL for ADK A2A server to invoke this agent
    framework: str = "langgraph" # Added framework for cross-framework A2A

class Message(BaseModel):
    """
    Our custom Pydantic model for inter-agent messages.
    This replaces the ADK's internal Message class for our A2A communication.
    """
    text: str = Field(..., description="The main text content of the message.")
    metadata: Optional[Dict[str, Any]] = Field(None, description="Optional metadata associated with the message.")
    # Add other fields if your agents need to exchange more complex data (e.g., audio, image_url, tool_calls)
    # Example: tool_calls: Optional[List[Dict[str, Any]]] = None
